{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ProjectName": {
      "Description": "Name of this project",
      "Type": "String"
    },
    "EnvType": {
      "Description": "Environment we are deploying into",
      "Default": "sandbox",
      "Type": "String",
      "AllowedValues": [
        "prod",
        "dev",
        "sandbox"
      ],
      "ConstraintDescription": "must specify prod, dev, or sandbox."
    },
    "ConsulSecret": {
      "Description": "Key to connect to Consul with",
      "Type": "String",
      "NoEcho": "true"
    },
    "ConsulEndpoint": {
      "Description": "Consul endpoint to connect to.",
      "Default": "us-west-2.consul.sandbox.nubis.allizom.org",
      "Type": "String",
      "AllowedValues": [
        "us-west-2.consul.sandbox.nubis.allizom.org",
        "us-east-1.consul.sandbox.nubis.allizom.org"
      ]
    },
    "Region": {
      "Description": "Region to deploy stack into",
      "Type": "String"
    },
    "BaseZone": {
      "Description": "Base zone to create route53 zone in",
      "Default": "nubis.allizom.org",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Existing ssh key to deploy to instances",
      "Type": "String"
    },
    "SslKey": {
      "Description": "Consul SSL key",
      "Type": "String",
      "NoEcho": "true"
    },
    "SslCert": {
      "Description": "Consul SSL cert",
      "Type": "String",
      "NoEcho": "true"
    },
    "VpcId": {
      "Description": "Id of the VPC",
      "Type": "String"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "Type": "String"
    },
    "AmiId": {
      "Description": "The id if the ami for this region",
      "Type": "String"
    }
  },
  "Mappings": {
    "InstanceTypeMap": {
      "prod": {
        "InstanceType": "m3.large"
      },
      "dev": {
        "InstanceType": "m3.medium"
      },
      "sandbox": {
        "InstanceType": "m3.medium"
      }
    }
  },
  "Conditions": {
    "CreateSandboxResources": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "sandbox"
      ]
    },
    "CreateAutomationResources": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EnvType"
            },
            "sandbox"
          ]
        }
      ]
    }
  },
  "Resources": {
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Inbound ELB traffic rules",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Load Balancer Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Inbound traffic rules",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8300",
            "ToPort": "8303",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "8300",
            "ToPort": "8303",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Web Server Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "AmiId"
        },
        "SecurityGroups": [
          {
            "Ref": "EC2SecurityGroup"
          }
        ],
        "InstanceType": {
          "Fn::FindInMap": [
            "InstanceTypeMap",
            {
              "Ref": "EnvType"
            },
            "InstanceType"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_PROJECT='",
                      {
                        "Ref": "ProjectName"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_ENVIRONMENT='",
                      {
                        "Ref": "EnvType"
                      },
                      "'"
                    ]
                  ]
                },
                "CONSUL_PUBLIC='0'",
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_DC='",
                      {
                        "Ref": "AWS::Region"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_SECRET='",
                      {
                        "Ref": "ConsulSecret"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_JOIN='",
                      {
                        "Ref": "ConsulEndpoint"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_KEY=",
                      {
                        "Fn::Join": [
                          "\n",
                          [
                            "\"-----BEGIN PRIVATE KEY-----",
                            {
                              "Ref": "SslKey"
                            },
                            "-----END PRIVATE KEY-----\""
                          ]
                        ]
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_CERT=",
                      {
                        "Fn::Join": [
                          "\n",
                          [
                            "\"-----BEGIN CERTIFICATE-----",
                            {
                              "Ref": "SslCert"
                            },
                            "-----END CERTIFICATE-----\""
                          ]
                        ]
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_MIGRATE='",
                      "1",
                      "'"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "false",
          "PauseTime": "PT1M"
        }
      },
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "VPCZoneIdentifier": [
          "subnet-a9139ccc",
          "subnet-cb3a97bc",
          "subnet-227fbc7b"
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "DesiredCapacity": "1",
        "MaxSize": "2",
        "LoadBalancerNames": [
          {
            "Ref": "ELB"
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Purpose",
            "Value": "Web Server",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Backups",
            "Value": "Nightly",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Shutdown",
            "Value": "Never",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          "subnet-dc139cb9",
          "subnet-ea3a979d",
          "subnet-3f7fbc66"
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "CrossZone": true,
        "Listeners": [
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Timeout": "3",
          "Target": "HTTP:80/Special%3AVersion",
          "Interval": "30"
        },
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Web Load Balancer"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "ElastiCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Inbound ElastiCache traffic rules",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "11211",
            "ToPort": "11211",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "EC2SecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Elasticache Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "ElastiCacheSubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "Description": "ElastiCache Subnet Group",
        "SubnetIds": [
          "subnet-a9139ccc",
          "subnet-cb3a97bc",
          "subnet-227fbc7b"
        ]
      }
    },
    "ElastiCache": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType": "cache.m3.medium",
        "Engine": "memcached",
        "EngineVersion": "1.4.14",
        "NumCacheNodes": "1",
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ElastiCacheSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "CacheSubnetGroupName": {
          "Ref": "ElastiCacheSubnetGroup"
        }
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "10",
        "DBInstanceClass": "db.t1.micro",
        "DBSubnetGroupName": {
          "Ref": "RDSSubnetGroup"
        },
        "Engine": "mysql",
        "EngineVersion": "5.6.22",
        "MultiAZ": "true",
        "VPCSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ],
        "MasterUsername": {
          "Ref": "ProjectName"
        },
        "MasterUserPassword": "provisioner_password",
        "DBName": {
          "Ref": "ProjectName"
        },
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Database Instance"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "DB Subnet Group",
        "SubnetIds": [
          "subnet-a9139ccc",
          "subnet-cb3a97bc",
          "subnet-227fbc7b"
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Database Subnet Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": {
          "SourceSecurityGroupId": {
            "Ref": "EC2SecurityGroup"
          },
          "IpProtocol": "tcp",
          "FromPort": "3306",
          "ToPort": "3306"
        },
        "GroupDescription": "Front end instance access",
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvType"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Database Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "HostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Condition": "CreateSandboxResources",
      "Properties": {
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "ProjectName"
              },
              {
                "Ref": "EnvType"
              },
              {
                "Ref": "BaseZone"
              }
            ]
          ]
        }
      }
    },
    "WWWRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "CreateAutomationResources",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ProjectName"
              },
              ".",
              {
                "Ref": "EnvType"
              },
              ".",
              {
                "Ref": "BaseZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "www",
              ".",
              {
                "Ref": "ProjectName"
              },
              ".",
              {
                "Ref": "EnvType"
              },
              ".",
              {
                "Ref": "BaseZone"
              },
              "."
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ELB",
              "DNSName"
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "ELBDNSName": {
      "Description": "Consul: / ELB CNAME",
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "DNSName"
        ]
      }
    },
    "wgServer": {
      "Description": "Consul: config/ Server name",
      "Value": {
        "Fn::Join": [
          ".",
          [
            "http://www",
            {
              "Ref": "ProjectName"
            },
            {
              "Ref": "EnvType"
            },
            "nubis.allizom.org"
          ]
        ]
      }
    },
    "wgDBserver": {
      "Description": "Consul: config/ Database endpoint",
      "Value": {
        "Fn::GetAtt": [
          "RDSInstance",
          "Endpoint.Address"
        ]
      }
    },
    "wgDBname": {
      "Description": "Consul: config/ Database name",
      "Value": {
        "Ref": "ProjectName"
      }
    },
    "wgDBuser": {
      "Description": "Consul: config/ Database user",
      "Value": {
        "Ref": "ProjectName"
      }
    },
    "wgMemCachedServers": {
      "Description": "Consul: config/ Memcache endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "array('",
            {
              "Fn::GetAtt": [
                "ElastiCache",
                "ConfigurationEndpoint.Address"
              ]
            },
            ":",
            {
              "Fn::GetAtt": [
                "ElastiCache",
                "ConfigurationEndpoint.Port"
              ]
            },
            "')"
          ]
        ]
      }
    }
  }
}
